var documenterSearchIndex = {"docs":
[{"location":"combinatorics.html#Combinatorics","page":"Combinatorics","title":"Combinatorics","text":"","category":"section"},{"location":"combinatorics.html#Partitions","page":"Combinatorics","title":"Partitions","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"Partition\npartitions\nascending_partitions\ndominates\nconjugate\ngetelement","category":"page"},{"location":"combinatorics.html#JuLie.Partition","page":"Combinatorics","title":"JuLie.Partition","text":"struct Partition{T} <: AbstractArray{T,1}\n\nA partition of an integer n ≥ 0 is a decreasing sequence n₁, n₂, … of positive integers nᵢ whose sum is equal to n. The nᵢ are called the parts of the partition. We can encode a partition as an array and we have implemented an own type Partition{T} as subtype of AbstractArray{T,1} to be able to conceptually work with partitions. As an example, you can create the partition 3+2+1 of 6 using\n\njulia> P=Partition([3,2,1])\njulia> sum(P)\n6\njulia> P[1]\n3\n\nYou may increase performance by using smaller integer types, e.g.\n\njulia> P=Partition(Int8[3,2,1])\n\nFor efficiency, the Partition constructor does not check whether the given array is in fact a partition, i.e. a decreasing sequence—that's your job.\n\nFor more general information on partitions, check out Wikipedia.\n\nRemark. I was thinking back and forth whether to implement an own structure for this because it's actually just an array of integers. But it makes sense since we have several functions just acting on partitons and it would be strange implementing them for arrays in general (where mostly they don't make sense). I was hesitating because I feared that an own structure for partitions will have a performance impact. But it does not! In my standard example creating the partitions of 90 there is really NO difference in runtime and memory consumption between using arrays and using an own structure.\n\nThe implementation of a subtype of AbstractArray is explained in the Julia documentation.\n\n\n\n\n\n","category":"type"},{"location":"combinatorics.html#JuLie.partitions","page":"Combinatorics","title":"JuLie.partitions","text":"partitions(n::Integer)\n\nA list of all partitions of an integer n ≥ 0, produced in lexicographically descending order. This ordering is like in SAGE, but opposite to GAP. You can apply reverse() to reverse the order.\n\nThe algorithm used is the algorithm ZS1 by A. Zoghbi and I. Stojmenovic, \"Fast algorithms for generating integer partitions\", Int. J. Comput. Math. 70 (1998), no. 2, 319–332.\n\nAs usual, you may increase performance by casting n into a smaller integer type, e.g.\n\njulia> partitions(Int8(90))\n\n\n\n\n\npartitions(m::Integer, n::Integer, l1::Integer, l2::Integer; z=0)\n\nA list of all partitions of an integer m ≥ 0 into n ≥ 0 parts with lower bound l1 ≥ 0 and upper bound l2 ≥ l1 for the parts. There are two choices for the parameter z:\n\nz=0: no further restriction (default);\nz=1: only distinct parts.\n\nThe partitions are produced in decreasing order.\n\nThe algorithm used is \"parta\" by W. Riha and K. R. James, \"Algorithm 29. Efficient Algorithms for Doubly and Multiply Restricted Partitions\" (1976). De-gotoed from ALGOL code by Elisa!\n\n\n\n\n\npartitions(m::Integer, n::Integer)\n\nAll partitions of an integer m ≥ 0 into n ≥ 1 parts (no further restrictions). This simply calls partitions(m,n,1,m,z=0).\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.ascending_partitions","page":"Combinatorics","title":"JuLie.ascending_partitions","text":"ascending_partitions(n::Integer;alg=\"ks\")\n\nInstead of encoding a partition of an integer n ≥ 0 as a descending sequence (which is our convention), one can also encode it as an ascending sequence. In the papers below it is claimed that generating the list of all ascending partitions is more efficient than generating descending ones. To test this, I have implemented the algorithms:\n\n\"ks\" (default) is the algorithm AccelAsc (Algorithm 4.1) by J. Kelleher and B. O'Sullivan, \"Generating All Partitions: A Comparison Of Two Encodings\", https://arxiv.org/pdf/0909.2331.pdf, May 2014.\n\"m\" is Algorithm 6 by M. Merca, \"Fast Algorithm for Generating Ascending Compositions\", J. Math Model. Algor. (2012) 11:89–104. This is similar to \"ks\".\n\nThe ascending partitions are given here as arrays, not of type Partition since these are descending by our convention.\n\nI don't see a significant speed difference to the descending encoding:\n\njulia> @btime partitions(Int8(90));\n  3.376 s (56634200 allocations: 6.24 GiB)\n\njulia> @btime ascending_partitions(Int8(90),alg=\"ks\");\n  3.395 s (56634200 allocations: 6.24 GiB)\n\njulia> @btime ascending_partitions(Int8(90),alg=\"m\");\n  3.451 s (56634200 allocations: 6.24 GiB)\n\nI am using \"ks\" as default since it looks slicker and I believe there is a tiny mistake in the publication of \"m\" (which I fixed).\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.dominates","page":"Combinatorics","title":"JuLie.dominates","text":"dominates(lambda::Partition, mu::Partition)\n\nReturns true if lambda ≥ mu in the dominance order on partitions, which is the partial order defined by λ ≥ μ if and only if λ₁ + … + λᵢ ≥ μ₁ + … + μᵢ for all i.\n\nFor more information see Wikipedia.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.conjugate","page":"Combinatorics","title":"JuLie.conjugate","text":"conjugate(P::Partition{T}) where T<:Integer\n\nReturns the conjugate of a partition P. The conjugate is obtained by writing P as a diagram and then flipping it along it's main diagonal.\n\nFor more information see Wikipedia.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.getelement","page":"Combinatorics","title":"JuLie.getelement","text":"getelement(P::Partition, i::Int)\n\nSometimes in algorithms for partitions it is convenient to be able to access parts beyond the length of the partition, and then you want to get zero instead of an error. This function is a shortcut for\n\nreturn (i>length(P.p) ? 0 : getindex(P.p,i))\n\nIf you are sure that P[i] exists, use getindex because this will be faster.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#Multipartitions","page":"Combinatorics","title":"Multipartitions","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"Multipartition\nmultipartitions\nsum(P::Multipartition{T}) where T<:Integer","category":"page"},{"location":"combinatorics.html#JuLie.Multipartition","page":"Combinatorics","title":"JuLie.Multipartition","text":"struct Multipartition{T} <: AbstractArray{Partition{T},1}\n\nAn r-component multipartition of an integer n is an r-tuple of partitions λ¹, λ², …, λʳ where each λⁱ is a partition of some integer aᵢ ≥ 0 and the aᵢ sum to n. As for partitions, we have implemented an own type Multipartition{T} which is a subtype of AbstractArray{Partition{T},1}. Here's an example:\n\njulia> P=Multipartition( [[2,1], [], [3,2,1]] )\njulia> sum(P)\n9\njulia> P[2]\nInt64[]\n\nAs with partitions, you can cast into smaller integer types to increase performance, e.g.\n\njulia> Multipartition( Array{Int8,1}[[2,1], [], [3,2,1]] )\n\n\n\n\n\n","category":"type"},{"location":"combinatorics.html#JuLie.multipartitions","page":"Combinatorics","title":"JuLie.multipartitions","text":"function multipartitions(n::T, r::Integer) where T<:Integer\n\nA list of all r-component multipartitions of n. As for partitions, you can cast n into smaller type for efficiency, e.g.\n\njulia> multipartitions(Int8(3),2)\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#Base.sum-Union{Tuple{Multipartition{T}}, Tuple{T}} where T<:Integer","page":"Combinatorics","title":"Base.sum","text":"function sum(P::Multipartition{T}) where T<:Integer\n\nIf P is a multipartition of the integer n, this function returns n.\n\n\n\n\n\n","category":"method"},{"location":"combinatorics.html#Tableaux","page":"Combinatorics","title":"Tableaux","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"Tableau\nshape\nweight\nis_semistandard\nsemistandard_tableaux\nis_standard\nstandard_tableaux\nreading_word\nhook_length\nhook_length_formula\nschensted\nbump!","category":"page"},{"location":"combinatorics.html#JuLie.Tableau","page":"Combinatorics","title":"JuLie.Tableau","text":"struct Tableau{T} <: AbstractArray{AbstractArray{T,1},1}\n\nA Young diagram is a diagram of finitely many empty \"boxes\" arranged in left-justified rows, with the row lengths in non-increasing order. Listing the number of boxes in each row gives a partition λ of a non-negative integer n (the total number of boxes of the diagram). The diagram is then said to be of shape λ. It's clear that there is a bijection between partitions of n and Young diagrams with n boxes.\n\nA Young tableau of shape λ is a filling of the boxes of the Young diagram of λ with elements from some set. After relabeling we can (and will) assume that we fill from a set of integers from 1 up to some number, which in applications is often equal to n. We can encode a tableau as an array of arrays and we have implemented an own type Tableau{T}  as subtype of AbstractArray{AbstractArray{T,1},1} to work with tableaux. You can create a tableau with\n\nTab=Tableau([[1,2,3],[4,5],[6]])\n\nand then work with it like with an array of arrays. As for partitions, you may increase performance by casting into smaller integer types, e.g.\n\nTab=Tableau(Array{Int8,1}[[2,1], [], [3,2,1]])\n\nFor efficiency, we do not check whether the given array is really a tableau, i.e. whether the structure of the array defines a partition.\n\nFor more information see Wikipedia.\n\n\n\n\n\n","category":"type"},{"location":"combinatorics.html#JuLie.shape","page":"Combinatorics","title":"JuLie.shape","text":"shape(Tab::Tableau{T})\n\nReturns the shape of the tableau Tab as a partition (of type Partition).\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.weight","page":"Combinatorics","title":"JuLie.weight","text":"weight(Tab::Tableau)\n\nThe weight of a tableau is the number of times each number appears in the tableau.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.is_semistandard","page":"Combinatorics","title":"JuLie.is_semistandard","text":"is_semistandard(Tab::Tableau)\n\nA tableau is called semistandard if the entries weakly increase along each row and strictly increase down each column.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.semistandard_tableaux","page":"Combinatorics","title":"JuLie.semistandard_tableaux","text":"semistandard_tableaux(shape::Partition{T}, max_val=sum(shape)::Integer) where T<:Integer\n\nReturns a list of all semistandard tableaux of given shape and filling elements bounded by max_val. By default, max_val is equal to the sum of the shape partition (the number of boxes in the Young diagram). The list of tableaux is in lexicographic order from left to right and top to bottom.\n\n\n\n\n\nsemistandard_tableaux(shape::Array{T,1}, max_val=sum(shape)::Integer) where T<:Integer\n\nSame as for semistandard_tableaux(shape::Partition{T}, max_val=sum(shape)::T) where T<:Integer, where the array is interpreted as a partition.\n\n\n\n\n\nsemistandard_tableaux(box_num::T, max_val=box_num::T) where T<:Integer\n\nReturns a list of all semistandard tableaux consisting of box_num boxes and filling elements bounded by max_val.\n\n\n\n\n\nsemistandard_tableaux(s::Array{T,1}, weight::Array{T,1}) where T<:Integer\n\nReturns a list of all semistandard tableaux with shape s and given weight. This requires that sum(s) = sum(weight).\n\n\n\n\n\nsemistandard_tableaux(s::Partition{T}, weight::Partition{T}) where T<:Integer\n\nSame as for semistandard_tableaux(s::Array{T,1}, weight::Array{T,1}) where T<:Integer.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.is_standard","page":"Combinatorics","title":"JuLie.is_standard","text":"is_standard(Tab::Tableau)\n\nA tableau is called standard if it is semistandard and the entries are in bijection with 1,…n, where n is the number of boxes.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.standard_tableaux","page":"Combinatorics","title":"JuLie.standard_tableaux","text":"standard_tableaux(s::Partition)\n\nReturns a list of all standard tableaux of a given shape.\n\nPerformance:\n\njulia> @time standard_tableaux([10,5,3,2]) #28779300 tableaux\n 40.143980 seconds (172.68 M allocations: 16.976 GiB, 69.19% gc time)\n\nmagma> time X:=StandardTableaux([10,5,3,2]);\nTime: 188.850\n\n\n\n\n\nstandard_tableaux(s::Array{Integer,1})\n\nSame as standard_tableaux(s::Partition).\n\n\n\n\n\nstandard_tableaux(n::Integer)\n\nReturns a list of all standard tableaux with n boxes.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.reading_word","page":"Combinatorics","title":"JuLie.reading_word","text":"reading_word(Tab::Tableau)\n\nReturns an array containing the filling of the tableau read from left to right and from bottom to top.\n\njulia> reading_word([ [1,2,3] , [4,5] , [6] ])\n6-element Array{Int64,1}:\n 6\n 4\n 5\n 1\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.hook_length","page":"Combinatorics","title":"JuLie.hook_length","text":"hook_length(Tab::Tableau, i::Integer, j::Integer)\n\nThe hook length of a box, is the number of boxes to the right in the same row + the number of boxes below in the same column + 1. The function returns the hook length of the box with coordinate (i,j), i.e. Tabij. The functions assumes that the box exists.\n\n\n\n\n\nhook_length(s::Partition, i::Integer, j::Integer)\n\nreturns the hook length of Tabij for a Tableau Tab of shape s.\n\nassumes that ilength(s) and jsi\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.hook_length_formula","page":"Combinatorics","title":"JuLie.hook_length_formula","text":"hook_length_formula(s::Partition)\n\nreturns the hook length formula for a tableau of shape s.\n\nf^λ = dfracn h_λ(ij)\n\nwhere the product is over all cells (ij) in Tab, and h_λ is the hook_length.\n\nEquals the number of standard tableaux of shape s\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.schensted","page":"Combinatorics","title":"JuLie.schensted","text":"schensted(sigma::Array{Integer,1})\n\nAn implementation of the Schensted algorithm from the Robinson-Schensted correspondence. sigma represents the second line of a Permutation in two-line notation: 1-sigma1  2-sigma2  Returns a pair of standard tableaux PQ (insertion- and recording- tableaux)\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#Kostka-Polynomials","page":"Combinatorics","title":"Kostka Polynomials","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"kostka_polynomial","category":"page"},{"location":"combinatorics.html#JuLie.kostka_polynomial","page":"Combinatorics","title":"JuLie.kostka_polynomial","text":"kostka_polynomial(lambda::Partition{T}, mu::Partition{T})\n\nreturns the Kostka polynomial K_lambdamu as a fmpz_poly over ZZ in t.\n\nThe Kostka polynomials are a Family of polynomials K_λμ relating Hall-Littlewood polynomials P_μ to Schur polynomials s_λ :\n\ns_λ(x_1x_n) =sum_μ K_λμ(t)P_μ(x_1x_nt)\n\nThey can be formulated as:\n\nK_λμ(t) = _T  SSYT(λμ) t^charge(T)\n\nBut I used the following fomula:\n\nK_λμ(t)=_v_K=1^l(λ)-1_n1\nbeginbmatrix\nℙ_n^(K)+m_n(v^(K))\nm_n(v^(K))\nendbmatrix_t\n\nwhere the sum is over all admissible configurations v i.e. sequences of partitions v^(K) with\n\nv^(0)=μ text hspace2mm  v^(K)=_jK+1λ_j texthspace5mm and hspace5mm ℙ_n^(K)0  texthspace2mm for all hspace1mm n0 K=01l(λ)\n\nbeginaligned\n ℙ_n^(K) = _j1leftminleft(nv_j^(K+1)right) - 2minleft(nv_j^(K)right) + minleft(nv_j^(K-1)right)right\n\n c(v) = _i1(i-1)μ_i + _K=1^l(λ)-1left(𝕄leftv^(K) v^(K)right - 𝕄leftv^(K) v^(K-1)rightright)\n\n 𝕄ρκ = _ij1 min(ρ_iκ_j)\nendaligned\n\nleftgenfrac0pt0mn right_t the Gaussian binomial coefficient\n\nThe Algorithm is based on A matrix model for WZW (Apendix B) by Nick Dorey, David Tonga and Carl Turner\n\n\n\n\n\nkostka_polynomial(lambda::Array{Integer,1}, mu::Array{Integer,1})\n\nShortcut for kostka_polynomial.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#Schur-Polynomials","page":"Combinatorics","title":"Schur Polynomials","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"schur_polynomial","category":"page"},{"location":"combinatorics.html#JuLie.schur_polynomial","page":"Combinatorics","title":"JuLie.schur_polynomial","text":"schur_polynomial(shp::Partition)\n\nreturns the Schur function s_shp as a Multivariate Polynomial.\n\ns_shp=_T x_1^m_1x_n^m_n\n\nwhere the sum is taken over all semistandard tableaux T of shape shp, and m_i gives the weight of i in T.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#Enumerative-functions","page":"Combinatorics","title":"Enumerative functions","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"num_partitions\ncatalan\nstirling1\nstirling2\nlucas","category":"page"},{"location":"combinatorics.html#JuLie.num_partitions","page":"Combinatorics","title":"JuLie.num_partitions","text":"num_partitions(n::fmpz)\nnum_partitions(n::Integer)\n\nThe number of integer partitions of the integer n  0. Uses the function from FLINT, which is really fast.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\nnum_partitions(n::fmpz, k::fmpz)\nnum_partitions(n::Integer, k::Integer)\n\nThe number of integer partitions of the integer n  0 into k  0 parts. The implementation uses a recurrence relation.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.catalan","page":"Combinatorics","title":"JuLie.catalan","text":"catalan(n::fmpz; alg=\"binomial\")\ncatalan(n::Integer; alg=\"binomial\")\n\nThe n-th Catalan number. This counts a gazillion of things, see OEIS for more information. There are two algorithms implemented:\n\n\"binomial\" (default): uses a simple formula with binomial coefficients.\n\"iterative\": uses an iterative computation.\n\nThe binomial computation is much faster:\n\njulia> @time x=catalan( ZZ(10)^5 , alg=\"binomial\");\n 0.007727 seconds (9 allocations: 95.750 KiB)\n\njulia> @time x=catalan( ZZ(10)^5 , alg=\"iterative\");\n 1.572488 seconds (1.01 M allocations: 2.333 GiB, 1.36% gc time)\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.stirling1","page":"Combinatorics","title":"JuLie.stirling1","text":"stirling1(n::fmpz, k::fmpz)\nstirling1(n::Integer, k::Integer)\n\nThe Stirling number S_1(nk) of the first kind. The absolute value of S_1(nk) counts the number of permutations of n elements with k disjoint cycles. The implementation is a wrapper to the function in FLINT.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.stirling2","page":"Combinatorics","title":"JuLie.stirling2","text":"stirling2(n::fmpz, k::fmpz)\nstirling2(n::Integer, k::Integer)\n\nThe Stirling number S_2(nk) of the second kind. This counts the number of partitions of an n-set into k non-empty subsets. The implementation is a wrapper to the function in FLINT.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.lucas","page":"Combinatorics","title":"JuLie.lucas","text":"lucas(n::fmpz)\nlucas(n::Integer)\n\nThe n-th Lucas number. For more information on these numbers, see OEIS. The implementation is a wrapper to the function in GMP.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#Quantum-numbers","page":"Combinatorics","title":"Quantum numbers","text":"","category":"section"},{"location":"combinatorics.html","page":"Combinatorics","title":"Combinatorics","text":"quantum_number\nquantum","category":"page"},{"location":"combinatorics.html#JuLie.quantum_number","page":"Combinatorics","title":"JuLie.quantum_number","text":"quantum_number(n::Int, q::RingElem)\n\nFor an integer n ≥ 0 and an invertible element q of a ring R, the quantum integer n_q in R is for n ≥ 0 defined as n_q = sum_i=0^n-1 q^n-(2i+1) and for n < 0 as n_q = --n_q.\n\n\n\n\n\nquantum_number(n::Int)\n\nThe quantum number n_q where q is the interdeterminate of the Laurent polynomial ring mathbbZqq^-1 in one variable over the integers.\n\n\n\n\n\n","category":"function"},{"location":"combinatorics.html#JuLie.quantum","page":"Combinatorics","title":"JuLie.quantum","text":"quantum(n::Int, q::RingElem)\n\nThis is a shortcut for quantum_number(n,q).\n\n\n\n\n\nquantum(n::Int)\n\nThis is a shortcut for quantum_number(n).\n\n\n\n\n\n","category":"function"},{"location":"index.html#JuLie.jl","page":"About","title":"JuLie.jl","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"JuLie.jl is an early-stage Julia/OSCAR package for things around algebraic Lie theory, representation theory, and relevant combinatorics. I hope this package will grow with time—contributions are necessary and very much welcome!","category":"page"},{"location":"index.html","page":"About","title":"About","text":"By Ulrich Thiel (ulthiel.com/math) and contributors.","category":"page"},{"location":"index.html#Using","page":"About","title":"Using","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"To install the package, you first need to install Julia. Then after starting Julia, type the following:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"using Pkg\r\nPkg.add(url=\"https://github.com/ulthiel/JuLie.jl\")","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Now, you can start using the package as follows:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"using JuLie\r\npartitions(10)","category":"page"},{"location":"index.html","page":"About","title":"About","text":"You can get help for a function by putting a question mark in front, e.g.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"?partitions","category":"page"},{"location":"index.html#Motivation","page":"About","title":"Motivation","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Especially for combinatorics there's a lot already in other computer algebra systems. So, why another package? On the one hand, it's a great way to learn about algorithms, so why not? On the more serious side, have a look at the following examples creating the list (not an iterator) of all partitions of the integer 90 (there are ~56.6 million) in different systems.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"In Sage (v9.1):","category":"page"},{"location":"index.html","page":"About","title":"About","text":"sage: time X=Partitions(90).list()\r\nWall time: 3min 5s\r\n#Uses 26.665GiB mem, quitting Sage takes quite a bit of time","category":"page"},{"location":"index.html","page":"About","title":"About","text":"In GAP (v4.11.0):","category":"page"},{"location":"index.html","page":"About","title":"About","text":"gap> L:=Partitions(90);; time/1000.0;\r\n51.962\r\n#Uses 11.8477 GiB mem, still works fine","category":"page"},{"location":"index.html","page":"About","title":"About","text":"In Magma (v2.25-5):","category":"page"},{"location":"index.html","page":"About","title":"About","text":"> time X:=Partitions(90);\r\nTime: 32.990\r\n//Uses 15.688 GiB mem, Magma UNUSABLE from now on!!","category":"page"},{"location":"index.html","page":"About","title":"About","text":"And now, in Julia (v1.5.2, my implementation):","category":"page"},{"location":"index.html","page":"About","title":"About","text":"julia> @time partitions(Int8(90));\r\n5.447290 seconds (56.63 M allocations: 6.239 GiB, 46.77% gc time)\r\n#No problem afterwards","category":"page"},{"location":"index.html","page":"About","title":"About","text":"I find the performance by Julia very convincing and this is the real reason why I want to have a Julia package for the things I'm interested in. I'm cheating here a bit because I'm using 8-bit integers (thus saving memory). But we can also use bigger integers and the Julia implementation is still more efficient:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"julia> @time partitions(Int64(90)); #this time with 64-bit integers\r\n16.481893 seconds (56.63 M allocations: 13.570 GiB, 57.15% gc time)\r\n#No problem","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Having the possibility to work with special integer types is very useful sometimes. Of course, you can do the same in C. But Julia is a high-level language with a similar simple syntax like Python, so why would anyone still go through such a pain? Here's one more, just because I can do it:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"julia> @time partitions(Int16(130)); #~5.4 billion!\r\n12910.885498 seconds (5.37 G allocations: 739.784 GiB, 96.51% gc time)\r\n#No worries! (Of course, it's better to use a partition iterator in this case.)","category":"page"},{"location":"index.html#Developing","page":"About","title":"Developing","text":"","category":"section"},{"location":"index.html#Setting-up-the-repository","page":"About","title":"Setting up the repository","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Clone this repository to somewhere on your computer:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"git clone https://github.com/ulthiel/JuLie.jl","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Enter the directory \"JuLie.jl\", start Julia, hit the \"]\" key to enter REPL mode, and then add the package to the registry:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"dev .","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Exit the REPL mode by hitting the backspace key. Then you can start using the package as usual with","category":"page"},{"location":"index.html","page":"About","title":"About","text":"using JuLie","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Any changes you make to the code now will not be available in the current Julia session—you have to restart it. This is simply the way Julia works but this is annoying when developing. A solution is to load the Revise package before loading the package.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"using Pkg\r\nPkg.add(\"Revise\")\r\nusing Revise\r\nusing JuLie","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Now, changes you make in the code are immediately available in the Julia session (except for changes to structures, here you need to restart).","category":"page"},{"location":"index.html#Programming-guidelines","page":"About","title":"Programming guidelines","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Have a look at the file src/partitions.jl to see how the stuff works and how I want code to look like.\nCheck out the Julia Style Guide and Performance Guide.\nEverything has to be well-documented, algorithms and papers have to be properly referenced.\nIf your implementation is not more efficient than those in other computer algebra systems then it's not good enough.\nFor every function you implement, there has to be a reasonable test in test/runtests.jl. You can run the complete unit test with Pkg.test(\"JuLie\").\nFor large number arithmetic we use Nemo (type fmpz with constructor ZZ for integers, type fmpq with constructor QQ for rationals, etc.). See the file src/enum_func.jl for examples. For more general rings (polynomial rings, laurent polynomial rings, etc.) we use AbstractAlgebra, see src/quantum_numbers.jl for examples. This is all part of the OSCAR system.","category":"page"},{"location":"index.html#Contributors","page":"About","title":"Contributors","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Tom Schmit (TU Kaiserslautern)","category":"page"},{"location":"lie-theory.html#Lie-theory","page":"Lie theory","title":"Lie theory","text":"","category":"section"},{"location":"lie-theory.html","page":"Lie theory","title":"Lie theory","text":"Blah","category":"page"}]
}
